{"version":3,"file":"ng-connection-service.js","sources":["ng://ng-connection-service/lib/ng-connection-service.service.ts","ng://ng-connection-service/lib/ng-connection-service.module.ts","ng://ng-connection-service/public-api.ts","ng://ng-connection-service/ng-connection-service.ts"],"sourcesContent":["import { Inject, Injectable, InjectionToken, OnDestroy, Optional } from '@angular/core';\nimport { BehaviorSubject, fromEvent, interval, Observable, Subscription } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { switchMap } from 'rxjs/operators';\n/**\n * Instance of this interface is used to report current connection status.\n */\nexport interface ConnectionState {\n  /**\n   * \"True\" if browser has network connection. Determined by Window objects \"online\" / \"offline\" events.\n   */\n  hasNetworkConnection: boolean;\n  /**\n   * \"True\" if browser has Internet access. Determined by heartbeat system which periodically makes request to heartbeat Url.\n   */\n  hasInternetAccess: boolean;\n}\n\n/**\n * Instance of this interface could be used to configure \"ConnectionService\".\n */\nexport interface ConnectionServiceOptions {\n  /**\n   * Controls the Internet connectivity heartbeat system. Default value is 'true'.\n   */\n  enableHeartbeat?: boolean;\n  /**\n   * Url used for checking Internet connectivity, heartbeat system periodically makes \"HEAD\" requests to this URL to determine Internet\n   * connection status. Default value is \"//internethealthtest.org\".\n   */\n  heartbeatUrl?: string;\n  /**\n   * Interval used to check Internet connectivity specified in milliseconds. Default value is \"30000\".\n   */\n  heartbeatInterval?: number;\n  /**\n   * Interval used to retry Internet connectivity checks when an error is detected (when no Internet connection). Default value is \"1000\".\n   */\n  heartbeatRetryInterval?: number;\n  /**\n   * HTTP method used for requesting heartbeat Url. Default is 'head'.\n   */\n  requestMethod?: 'get' | 'post' | 'head' | 'options';\n\n}\n\n/**\n * InjectionToken for specifing ConnectionService options.\n */\nexport const ConnectionServiceOptionsToken: InjectionToken<ConnectionServiceOptions> = new InjectionToken('ConnectionServiceOptionsToken');\n\nexport const DEFAULT_CONNECTION_STATE: ConnectionState = {\n  hasInternetAccess: true,\n  hasNetworkConnection: window.navigator.onLine\n}\n\nexport const DEFAULT_HEART_BEAT_INTERVAL = 1000;\n// export const DEFAULT_HEART_BEAT_URL = 'https://jsonplaceholder.typicode.com';\nexport const DEFAULT_HEART_BEAT_URL = 'http://localhost:3000';\nexport const DEFAULT_HEART_BEAT_RETRY_INTERVAL = 1000;\n\nexport enum HTTP_REQUEST_METHODS {\n  HEAD = 'head',\n  GET = 'get',\n  POST = 'post',\n  PUT = 'put',\n  OPTIONS = 'options'\n}\n\nexport const DEFAULT_OPTIONS: ConnectionServiceOptions = {\n  enableHeartbeat: false,\n  heartbeatUrl: DEFAULT_HEART_BEAT_URL,\n  heartbeatInterval: DEFAULT_HEART_BEAT_INTERVAL,\n  heartbeatRetryInterval: 1000,\n  requestMethod: HTTP_REQUEST_METHODS.HEAD\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ConnectionService implements OnDestroy {\n\n  private currentState: ConnectionState = DEFAULT_CONNECTION_STATE;\n  private serviceOptions: ConnectionServiceOptions = DEFAULT_OPTIONS;\n\n  private subscription: Subscription = new Subscription();\n  private httpSubscription: Subscription = new Subscription();\n\n  private stateChanged$ = new BehaviorSubject<ConnectionState>(DEFAULT_CONNECTION_STATE);\n\n  constructor(private http: HttpClient, @Inject(ConnectionServiceOptionsToken) @Optional() options: ConnectionServiceOptions) {\n    // TODO: Token useValue in providers not working.\n    this.serviceOptions = { ...DEFAULT_OPTIONS, ...options };\n    this.checkNetworkState();\n\n    if (this.serviceOptions.enableHeartbeat) {\n      this.checkInternetState();\n    }\n  }\n\n  private checkNetworkState() {\n    this.subscription.add(fromEvent(window, 'online').subscribe(() => {\n      this.currentState.hasNetworkConnection = true;\n      this.checkInternetState();\n      this.publishState();\n    }));\n\n    this.subscription.add(fromEvent(window, 'offline').subscribe(() => {\n      this.currentState.hasNetworkConnection = false;\n      this.checkInternetState();\n      this.publishState();\n    }));\n  }\n\n  private checkInternetState() {\n\n    if (this.serviceOptions.enableHeartbeat) {\n      this.subscription = interval(3000).pipe(\n        switchMap(async () =>\n          this.http[this.serviceOptions.requestMethod || HTTP_REQUEST_METHODS.HEAD](this.serviceOptions.heartbeatUrl || DEFAULT_HEART_BEAT_URL,\n            { responseType: 'text' }).subscribe(\n              {\n                next: (data) => {\n                  this.currentState.hasInternetAccess = true;\n                  this.publishState();\n                },\n\n                error: (err) => {\n                  this.currentState.hasInternetAccess = false;\n                  this.publishState();\n                  throw err;\n                },\n              }\n            )\n        )\n      ).subscribe(\n        res => {\n        }\n      );\n      // this.httpSubscription = timer(0, this.serviceOptions.heartbeatInterval || DEFAULT_HEART_BEAT_INTERVAL)\n      //   .pipe(\n      //     switchMap(async () => this.http[this.serviceOptions.requestMethod || HTTP_REQUEST_METHODS.HEAD](this.serviceOptions.heartbeatUrl || DEFAULT_HEART_BEAT_URL,\n      //       { responseType: 'text' })),\n      //     retryWhen(errors =>\n      //       errors.pipe(\n      //         // log error message\n      //         tap(val => {\n      //           this.currentState.hasInternetAccess = false;\n      //           this.publishState();\n      //           throw errors;\n      //         }),\n      //         // restart after 5 seconds\n      //         delay(this.serviceOptions.heartbeatRetryInterval || DEFAULT_HEART_BEAT_RETRY_INTERVAL)\n      //       )\n      //     )\n      //   )\n      //   .subscribe(result => {\n      //     this.currentState.hasInternetAccess = true;\n      //     this.publishState();\n      //   });\n    } else {\n      this.currentState.hasInternetAccess = false;\n      this.publishState();\n    }\n  }\n\n  private publishState() {\n    this.stateChanged$.next(this.currentState);\n  }\n\n  /**\n * Monitor Network & Internet connection status by subscribing to this observer. If you set \"reportCurrentState\" to \"false\" then\n * function will not report current status of the connections when initially subscribed.\n * @param reportCurrentState Report current state when initial subscription. Default is \"true\"\n */\n  public monitor(options?: ConnectionServiceOptions): Observable<ConnectionState> {\n    if (options) {\n      this.serviceOptions = { ...this.serviceOptions, ...options };\n    }\n    if(this.serviceOptions.enableHeartbeat) {\n      this.checkInternetState();\n    }\n    return this.stateChanged$;\n  }\n\n  ngOnDestroy(): void {\n    this.subscription.unsubscribe();\n  }\n}\n","import { HttpClientModule } from '@angular/common/http';\nimport { NgModule } from '@angular/core';\nimport { ConnectionService } from './ng-connection-service.service';\n\n@NgModule({\n  imports: [HttpClientModule],\n  providers: [ConnectionService]\n})\nexport class ConnectionServiceModule { }\n","/*\n * Public API Surface of ng-connection-service\n */\n\nexport * from './lib/ng-connection-service.service';\nexport * from './lib/ng-connection-service.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}